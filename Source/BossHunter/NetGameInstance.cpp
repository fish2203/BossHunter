// Fill out your copyright notice in the Description page of Project Settings.


#include "NetGameInstance.h"
#include <OnlineSubsystem.h>
//#include <Interfaces/OnlineSessionInterface.h>
#include <OnlineSessionSettings.h>
#include <Online/OnlineSessionNames.h>
#include "MoveBossZoneWidget.h"
#include "PlayerScoreWidget.h"

UNetGameInstance::UNetGameInstance()
{
	//플레이어 스코어 위젯을 생성
	//UPlayerScoreWidget
	/*ConstructorHelpers::FClassFinder<UPlayerScoreWidget> tempPlayerScoreWidget(TEXT("/Script/UMGEditor.WidgetBlueprint'/Game/BulePrint/Cheezebee/Widget/WBP_PlayerScoreWidget.WBP_PlayerScoreWidget_C'"));
	if (tempPlayerScoreWidget.Succeeded())
	{
		playerScoreUIPakage = tempPlayerScoreWidget.Class;
	}*/

}

// OnlineSessionInterface 통해서 한다.
// 세션을 만든다. 
// 세션을 검색
// 세션을 참여


void UNetGameInstance::Init()
{
	Super::Init();

	// 온라인 서브 시스템 가져오자
	//#include <OnlineSubsystem.h>
	IOnlineSubsystem* subsys = IOnlineSubsystem::Get();
	if (subsys)
	{
		// 세션 인터페이스 가져오자
		sessionInterface = subsys->GetSessionInterface();
		//#include <Interfaces/OnlineSessionInterface.h>
		//새센만들기
		sessionInterface->OnCreateSessionCompleteDelegates.AddUObject(this, &UNetGameInstance::OnCreateSessionComplete);
		//세션지우기
		sessionInterface->OnDestroySessionCompleteDelegates.AddUObject(this, &UNetGameInstance::OnDestroySessionComplete);
		//세션찾기
		sessionInterface->OnFindSessionsCompleteDelegates.AddUObject(this, &UNetGameInstance::OnFindSessionComplete);
		//세션참가
		sessionInterface->OnJoinSessionCompleteDelegates.AddUObject(this, &UNetGameInstance::OnJoinSessionComplete);
	}

	//보스존으로 이동하는 위젯
	movewidgetPointer = CreateWidget<UMoveBossZoneWidget>(GetWorld(), moveWidgetPackage);
	movewidgetPointer->AddToViewport(1);


	//movewidgetPointer->SetVisibility(true);
	//movebosszoneWidget->SetVisibility(false);

	//플레이어 스코어 위젯을 붙이자
	//UPlayerScoreWidget
	/*playerScoreUI = CreateWidget<UPlayerScoreWidget>(GetWorld(), playerScoreUIPakage);
	playerScoreUI->AddToViewport(1);
	playerScoreUI->SetVisibility(ESlateVisibility::Visible);*/
}

void UNetGameInstance::CreateMySession(FString roomName, int32 maxPlayer)
{
	//#include <OnlineSessionSettings.h>
	FOnlineSessionSettings sessionSettings;

	// true 세션이 검색 된다.
	sessionSettings.bShouldAdvertise = true;

	// steam 사용하면 해당 옵션이 true 세션을 만들 수 있다.
	sessionSettings.bUseLobbiesIfAvailable = true;

	// 내가 게임중인 아닌지를 보여줄건지
	sessionSettings.bUsesPresence = true;
	// 게임 플레이 중에 참여할 수 있게
	sessionSettings.bAllowJoinInProgress = true;
	sessionSettings.bAllowJoinViaPresence = true;

	// 인원 수 
	//sessionSettings.NumPublicConnections = 10;
	sessionSettings.NumPublicConnections = maxPlayer;
	UE_LOG(LogTemp, Warning, TEXT("origin : %s"), *roomName);

	// base64로 Encode
	roomName = StringBase64Encode(roomName);
	sessionSettings.Set(FName("ROOM_NAME"), roomName, EOnlineDataAdvertisementType::ViaOnlineServiceAndPing);
	

	// 세션 생성 요청
	FUniqueNetIdPtr netID = GetWorld()->GetFirstLocalPlayerFromController()->GetUniqueNetIdForPlatformUser().GetUniqueNetId();

	//???
	int32 rand = FMath::RandRange(1, 100000);
	mySessionName += FString::Printf(TEXT("%d"), rand);
	//세센생성, 넷아이디, 생성자이름
	sessionInterface->CreateSession(*netID, FName(mySessionName), sessionSettings);
}

void UNetGameInstance::OnCreateSessionComplete(FName SessionName, bool bWasSuccessful)
{
	if (bWasSuccessful)
	{
		UE_LOG(LogTemp, Warning, TEXT("OnCreateSessionComplete Success -- %s"), *SessionName.ToString());

		//GetWorld()->ServerTravel(TEXT("/Game/ThirdPerson/Maps/BattleMap?listen"));
		//로비룸으로 이동
		GetWorld()->ServerTravel(TEXT("/Game/BulePrint/Cheezebee/Map/BossHunter/LobbyRoom?listen"));
	
	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("OnCreateSessionComplete Fail"));
	}
}

void UNetGameInstance::DestroyMySession()
{
	//sessionInterface->DestroySession(FName(mySessionName));
	//세션이름을 포인터로 가져오자.
	sessionInterface->DestroySession(FName(mySessionName));

}

void UNetGameInstance::OnDestroySessionComplete(FName SessionName, bool bWasSuccessful)
{
	if (bWasSuccessful)
	{
		UE_LOG(LogTemp, Warning, TEXT("OnDestroySessionComplete Success -- %s"), *SessionName.ToString());
	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("OnDestroySessionComplete Fail"));
	}
}

void UNetGameInstance::FindOtherSession()
{

	sessionSearch = MakeShared<FOnlineSessionSearch>();

	//#include <Online/OnlineSessionNames.h>
	sessionSearch->QuerySettings.Set(SEARCH_PRESENCE, true, EOnlineComparisonOp::Equals);

	//세션 최대참가인원
	sessionSearch->MaxSearchResults = 10;

	// 세션 검색 요청
	sessionInterface->FindSessions(0, sessionSearch.ToSharedRef());
}

void UNetGameInstance::OnFindSessionComplete(bool bWasSuccessful)
{
	if (bWasSuccessful)
	{
		auto results = sessionSearch->SearchResults;
		UE_LOG(LogTemp, Warning, TEXT("OnFindSessionComplete Success - count : %d"), results.Num());


		for (int32 i = 0; i < results.Num(); i++)
		{
			FOnlineSessionSearchResult si = results[i];
			//룸이름 변수 선언
			FString roomName;
			si.Session.SessionSettings.Get(FName("ROOM_NAME"), roomName);
			
			// 세션 정보 ---> String 으로 
			// 세션의 최대 인원
			int32 maxPlayer = si.Session.SessionSettings.NumPublicConnections;
			// 세션의 참여 인원 (최대 인원 - 남은 인원)
			int32 currPlayer = maxPlayer - si.Session.NumOpenPublicConnections;

			//방이름 디코딩
			roomName = StringBase64Decode(roomName);
			
			// 방이름 ( 5 / 10 )
			FString sessionInfo = FString::Printf(
				TEXT("%s ( %d / %d )"),
				*roomName, currPlayer, maxPlayer);

			onSearchComplete.ExecuteIfBound(i, sessionInfo);

		}

		// idx 에 -1 셋팅해서 검색 완료 알려주자
		//onSearchComplete.ExecuteIfBound(-1, TEXT(""));

		if (results.Num() > 0)
		{
			JoinOtherSession(0);
		}

		/*for (auto si : results)
		{
			FString roomName;
			si.Session.SessionSettings.Get(FName(TEXT("ROOM_NAME")), roomName);
		}*/

	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("OnFindSessionComplete Fail"));
	}
}


void UNetGameInstance::JoinOtherSession(int32 idx)
{
	//TArray<FOnlineSessionSearchResult> 
	auto results = sessionSearch->SearchResults;
	
	if (sessionInterface == nullptr)
	{
		UE_LOG(LogTemp, Warning, TEXT("sessionInterface is null"));
	}
	if (results.Num() <= 0)
	{
		UE_LOG(LogTemp, Warning, TEXT("results Zero"));

	}
	UE_LOG(LogTemp, Warning, TEXT("results count : %d, idx : %d"), results.Num(), idx);
	
	
	//세션번호
	sessionInterface->JoinSession(0, FName(mySessionName), results[idx]);

}

void UNetGameInstance::OnJoinSessionComplete(FName SessionName, EOnJoinSessionCompleteResult::Type result)
{
	if (result == EOnJoinSessionCompleteResult::Success)
	{
		UE_LOG(LogTemp, Warning, TEXT("OnJoinSessionComplete Success : %s"), *SessionName.ToString());
		FString url;
		// 참여해야 하는 Listen 서버 URL을 받아 오자
		sessionInterface->GetResolvedConnectString(SessionName, url);
		UE_LOG(LogTemp, Warning, TEXT("Join session URL : %s"), *url);

		if (!url.IsEmpty())
		{
			// 해당 URL 로 접속하자
			APlayerController* pc = GetWorld()->GetFirstPlayerController();
			pc->ClientTravel(url, ETravelType::TRAVEL_Absolute);
		}

	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("OnJoinSessionComplete Fail : %d"), result);
	}
}


void UNetGameInstance::EnterOtherMap()
{
	ServerRPC_EnterOtherMap();
}

void UNetGameInstance::ServerRPC_EnterOtherMap_Implementation()
{
	FString URL = TEXT("/Game/BulePrint/Cheezebee/Map/BossHunter/BossZone?listen");
	GetWorld()->ServerTravel(URL, ETravelType::TRAVEL_Absolute);
}

FString UNetGameInstance::StringBase64Encode(FString str)
{
	// Set 할 때 : FString -> UTF8 (std::string) -> TArray<uint8> -> base64 로 Encode
	std::string utf8String = TCHAR_TO_UTF8(*str);
	TArray<uint8> arrayData = TArray<uint8>((uint8*)(utf8String.c_str()), utf8String.length());
	return FBase64::Encode(arrayData);
}

FString UNetGameInstance::StringBase64Decode(FString str)
{
	// Get 할 때 : base64 로 Decode -> TArray<uint8> -> TCHAR
	TArray<uint8> arrayData;
	FBase64::Decode(str, arrayData);
	std::string ut8String((char*)(arrayData.GetData()), arrayData.Num());
	return UTF8_TO_TCHAR(ut8String.c_str());
}